{"version":3,"sources":["state/reducer.ts","state/EngineContext.tsx","state/actions.ts","components/EndScreen.tsx","components/GameSetup.tsx","state/models.ts","components/RoundInProgress.tsx","components/Scoring.tsx","components/Game.tsx","App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx"],"names":["engineReducer","state","action","players","type","completedPhase","lastCommittedScore","stagedScoreAdjustment","playerId","length","name","data","gameState","hasGameStarted","isRoundInProgress","map","p","filter","adjustment","nextPlayers","isGameOver","some","phasesView","defaultEngineState","EngineContext","createContext","undefined","EngineProvider","children","useReducer","actions","dispatch","addPlayer","start","endRound","adjustPhase","adjustStagedScoring","discardStagedScoreAdustments","commitScores","reset","removePlayer","createActions","Provider","value","EndScreen","useContext","winner","sort","a","b","style","marginTop","onClick","e","Roster","useState","playerName","setPlayerName","anyPlayersDefined","className","placeholder","aria-label","onChange","target","onKeyPress","key","GameSetup","hasAtLeastTwoPlayers","href","rel","disabled","standardPhases","goals","goalType","successThreshold","PhaseCard","phase","phaseIndex","phaseView","doesPhaseHavePlayers","goalText","reduce","agg","goal","nextGoal","RoundInProgress","playersByPhase","targetPhase","divs","phaseDefinition","ScoreSlider","label","rangeValue","setRangeValueCb","min","max","step","ScoreCard","player","fives","setFives","tens","setTens","skips","setSkips","wilds","setWilds","setCompletedPhase","useEffect","trueAdjustment","htmlFor","id","checked","x","Scoring","Game","scene","App","display","flexDirection","alignItems","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3fbdfed7.chunk.js","sourcesContent":["import { EngineState, GameAction } from \"./models\";\r\n\r\nexport const engineReducer = (\r\n  state: EngineState,\r\n  action: GameAction\r\n): EngineState => {\r\n  const { players } = state;\r\n\r\n  switch (action.type) {\r\n    case \"addPlayer\":\r\n      return {\r\n        ...state,\r\n        players: [\r\n          ...players,\r\n          {\r\n            completedPhase: 0,\r\n            lastCommittedScore: 0,\r\n            stagedScoreAdjustment: 0,\r\n            playerId: players.length,\r\n            name: action.data.name,\r\n          },\r\n        ],\r\n      };\r\n\r\n    case \"start\":\r\n      return {\r\n        ...state,\r\n        gameState: \"active\",\r\n        hasGameStarted: true,\r\n        isRoundInProgress: true,\r\n        players: players.map((p) => ({\r\n          ...p,\r\n          completedPhase: 0,\r\n          lastCommittedScore: 0,\r\n          stagedScoreAdjustment: 0,\r\n        })),\r\n      };\r\n\r\n    case \"removePlayer\":\r\n      return {\r\n        ...state,\r\n        players: players.filter((p) => p.playerId !== action.data.playerId),\r\n      };\r\n\r\n    case \"endRound\":\r\n      return {\r\n        ...state,\r\n        isRoundInProgress: false,\r\n      };\r\n\r\n    case \"adjustPhase\": {\r\n      const { adjustment, playerId } = action.data;\r\n      const nextPlayers = players.map((p) =>\r\n        p.playerId !== playerId\r\n          ? p\r\n          : { ...p, completedPhase: p.completedPhase + adjustment }\r\n      );\r\n\r\n      return {\r\n        ...state,\r\n        players: nextPlayers,\r\n      };\r\n    }\r\n\r\n    case \"adjustStagedScoring\": {\r\n      const { adjustment, playerId } = action.data;\r\n      return {\r\n        ...state,\r\n        players: players.map((p) =>\r\n          p.playerId === playerId\r\n            ? {\r\n                ...p,\r\n                stagedScoreAdjustment: p.stagedScoreAdjustment + adjustment,\r\n              }\r\n            : p\r\n        ),\r\n      };\r\n    }\r\n\r\n    case \"discardStagedScoreAdustments\": {\r\n      const { playerId } = action.data;\r\n      return {\r\n        ...state,\r\n        players: players.map((p) =>\r\n          p.playerId === playerId ? { ...p, stagedScoreAdjustment: 0 } : p\r\n        ),\r\n      };\r\n    }\r\n    case \"commitScores\":\r\n      const isGameOver = players.some((p) => p.completedPhase >= 10);\r\n      const nextPlayers = players.map((p) => ({\r\n        ...p,\r\n        lastCommittedScore: p.lastCommittedScore + p.stagedScoreAdjustment,\r\n        stagedScoreAdjustment: 0,\r\n      }));\r\n      return isGameOver\r\n        ? {\r\n            ...state,\r\n            gameState: \"complete\",\r\n            players: nextPlayers,\r\n          }\r\n        : {\r\n            ...state,\r\n            isRoundInProgress: true,\r\n            players: nextPlayers,\r\n          };\r\n\r\n    case \"reset\":\r\n      return {\r\n        gameState: \"init\",\r\n        hasGameStarted: false,\r\n        isRoundInProgress: false,\r\n        players: players,\r\n        phasesView: state.phasesView,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { createContext, useReducer } from \"react\";\r\n\r\nimport { createActions } from \"./actions\";\r\nimport { EngineState } from \"./models\";\r\nimport { engineReducer } from \"./reducer\";\r\n\r\nconst defaultEngineState: EngineState = {\r\n  gameState: \"init\",\r\n  players: [],\r\n  hasGameStarted: false,\r\n  isRoundInProgress: false,\r\n  phasesView: \"active\",\r\n};\r\n\r\nexport const EngineContext = createContext<\r\n  [EngineState, ReturnType<typeof createActions>?]\r\n>([defaultEngineState, undefined]);\r\n\r\nexport const EngineProvider: React.FC = ({ children }) => {\r\n  const [state, dispatch] = useReducer(engineReducer, defaultEngineState);\r\n  const actions = createActions(dispatch);\r\n\r\n  return (\r\n    <EngineContext.Provider value={[state, actions]}>\r\n      {children}\r\n    </EngineContext.Provider>\r\n  );\r\n};\r\n","import { Dispatch } from \"react\";\n\nimport { GameAction } from \"./models\";\n\nexport const createActions = (dispatch: Dispatch<GameAction>) => {\n  return {\n    addPlayer: (name?: string) =>\n      dispatch({ type: \"addPlayer\", data: { name } }),\n    start: () => dispatch({ type: \"start\" }),\n    endRound: () => dispatch({ type: \"endRound\" }),\n    adjustPhase: (playerId: number, adjustment: 1 | -1) =>\n      dispatch({ type: \"adjustPhase\", data: { playerId, adjustment } }),\n    adjustStagedScoring: (playerId: number, adjustment: number) =>\n      dispatch({ type: \"adjustStagedScoring\", data: { playerId, adjustment } }),\n    discardStagedScoreAdustments: (playerId: number) =>\n      dispatch({ type: \"discardStagedScoreAdustments\", data: { playerId } }),\n    commitScores: () => dispatch({ type: \"commitScores\" }),\n    reset: () => dispatch({ type: \"reset\" }),\n    removePlayer: (playerId: number) =>\n      dispatch({ type: \"removePlayer\", data: { playerId } }),\n  };\n};\n","import React, { useContext } from \"react\";\n\nimport { EngineContext } from \"../state/EngineContext\";\n\nexport const EndScreen: React.FC = () => {\n  const [{ players }, actions] = useContext(EngineContext);\n\n  const winner = players\n    .filter((p) => p.completedPhase === 10)\n    .sort((a, b) => a.lastCommittedScore - b.lastCommittedScore)[0];\n\n  return (\n    <div>\n      <h1>Congratulations {winner.name || `Player ${winner.playerId}`}!</h1>\n      {players.map((p) => (\n        <div>\n          {p.name || `Player ${p.playerId}`} completed Phase {p.completedPhase}{\" \"}\n          with {p.lastCommittedScore} points.\n        </div>\n      ))}\n      <button\n        style={{ marginTop: 10 }}\n        onClick={(e) => {\n          actions?.reset();\n        }}\n      >\n        Play again!\n      </button>\n    </div>\n  );\n};\n","import React, { useContext, useState } from \"react\";\n\nimport { EngineContext } from \"../state/EngineContext\";\n\nconst Roster: React.FC = () => {\n  const [{ players }, actions] = useContext(EngineContext);\n  const [playerName, setPlayerName] = useState<string>(\"\");\n\n  const anyPlayersDefined = players && players.length > 0;\n\n  return (\n    <div className=\"Roster-container\">\n      <div className=\"Roster-heading\">Players:</div>\n\n      {anyPlayersDefined && (\n        <div className=\"Roster-players\">\n          {players.map((p) => (\n            <div className=\"Roster-player\" key={`player-${p.playerId}`}>\n              {p.name || p.playerId}\n              <span\n                className=\"Roster-remove\"\n                onClick={(e) => {\n                  actions?.removePlayer(p.playerId);\n                }}\n              >\n                X\n              </span>\n            </div>\n          ))}\n        </div>\n      )}\n\n      <div>\n        <input\n          type=\"text\"\n          placeholder=\"new player\"\n          value={playerName}\n          aria-label=\"Player Name\"\n          onChange={(e) => {\n            setPlayerName(e?.target?.value);\n          }}\n          onKeyPress={(e) => {\n            if (e.key === \"Enter\") {\n              actions?.addPlayer(playerName);\n              setPlayerName(\"\");\n            }\n          }}\n        ></input>\n      </div>\n    </div>\n  );\n};\n\nexport const GameSetup: React.FC = () => {\n  const [{ players }, actions] = useContext(EngineContext);\n\n  const hasAtLeastTwoPlayers = players && players.length > 1;\n\n  return (\n    <div>\n      <div className=\"Game-setup-instruction\">\n        Tired of pen and paper? Let Phasekeeper track your game of{\" \"}\n        <a\n          href=\"https://www.mattelgames.com/en-us/cards/phase-10\"\n          rel=\"noreferrer\"\n          target=\"_blank\"\n        >\n          Phase 10\n        </a>\n        !\n      </div>\n      <div className=\"Game-setup-instruction\">\n        To get started, let's add your players.\n      </div>\n      <Roster />\n      <button\n        disabled={!hasAtLeastTwoPlayers}\n        onClick={(e) => {\n          actions?.start();\n        }}\n      >\n        Let's play!\n      </button>\n      <div className=\"Game-setup-instruction\">\n        Wish this site was an app you could use offline? Try \"Add to Home\n        Screen\"!\n      </div>\n      <div className=\"Game-setup-instruction\">\n        For more details, see these instructions for{\" \"}\n        <a\n          href=\"https://support.google.com/chrome/answer/9658361?hl=en&co=GENIE.Platform%3DAndroid\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          Chrome\n        </a>\n        ,{\" \"}\n        <a\n          href=\"https://www.howtogeek.com/667910/how-to-add-a-website-to-your-iphone-or-ipad-home-screen/\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          Safari\n        </a>\n        , and{\" \"}\n        <a\n          href=\"https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/Installable_PWAs\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          Firefox\n        </a>\n        .\n      </div>\n    </div>\n  );\n};\n","export interface PlayerState {\n  name?: string;\n  playerId: number;\n  completedPhase: number;\n  lastCommittedScore: number;\n  stagedScoreAdjustment: number;\n}\n\nexport type GameState = \"init\" | \"active\" | \"complete\";\n\nexport type GameAction =\n  | { type: \"addPlayer\"; data: { name?: string } }\n  | { type: \"start\" }\n  | { type: \"endRound\" }\n  | { type: \"adjustPhase\"; data: { playerId: number; adjustment: 1 | -1 } }\n  | {\n      type: \"adjustStagedScoring\";\n      data: { playerId: number; adjustment: number };\n    }\n  | { type: \"discardStagedScoreAdustments\"; data: { playerId: number } }\n  | { type: \"commitScores\" }\n  | { type: \"removePlayer\"; data: { playerId: number } }\n  | { type: \"reset\" };\n\nexport interface EngineState {\n  gameState: GameState;\n  players: PlayerState[];\n  hasGameStarted: boolean;\n  isRoundInProgress: boolean;\n  phasesView: \"all\" | \"active\";\n}\n\nexport type GoalType = \"set\" | \"run\" | \"color-match\";\nexport interface GoalDefintion {\n  goalType: GoalType;\n  successThreshold: number;\n}\n\nexport interface PhaseDefintion {\n  goals: GoalDefintion[];\n}\n\nexport const standardPhases: PhaseDefintion[] = [\n  {\n    goals: [\n      { goalType: \"set\", successThreshold: 3 },\n      { goalType: \"set\", successThreshold: 3 },\n    ],\n  },\n  {\n    goals: [\n      { goalType: \"set\", successThreshold: 3 },\n      { goalType: \"run\", successThreshold: 4 },\n    ],\n  },\n  {\n    goals: [\n      { goalType: \"set\", successThreshold: 4 },\n      { goalType: \"run\", successThreshold: 4 },\n    ],\n  },\n  { goals: [{ goalType: \"run\", successThreshold: 7 }] },\n  { goals: [{ goalType: \"run\", successThreshold: 8 }] },\n  { goals: [{ goalType: \"run\", successThreshold: 9 }] },\n  {\n    goals: [\n      { goalType: \"set\", successThreshold: 4 },\n      { goalType: \"set\", successThreshold: 4 },\n    ],\n  },\n  { goals: [{ goalType: \"color-match\", successThreshold: 7 }] },\n  {\n    goals: [\n      { goalType: \"set\", successThreshold: 5 },\n      { goalType: \"set\", successThreshold: 2 },\n    ],\n  },\n  {\n    goals: [\n      { goalType: \"set\", successThreshold: 5 },\n      { goalType: \"set\", successThreshold: 3 },\n    ],\n  },\n];\n","import React, { useContext } from \"react\";\n\nimport { PhaseDefintion, PlayerState, standardPhases } from \"../state\";\nimport { EngineContext } from \"../state/EngineContext\";\n\ninterface PhaseCardProps {\n  phase: PhaseDefintion;\n  phaseIndex: number;\n  players: PlayerState[];\n  phaseView: \"all\" | \"active\";\n}\n\nconst PhaseCard: React.FC<PhaseCardProps> = ({\n  phase,\n  phaseIndex,\n  players,\n  phaseView,\n}) => {\n  const doesPhaseHavePlayers = players && players.length > 0;\n\n  if (phaseView === \"active\" && !doesPhaseHavePlayers) {\n    return null;\n  }\n\n  const goalText = phase.goals.reduce((agg, goal) => {\n    const nextGoal = `a ${goal.goalType} of ${goal.successThreshold}`;\n    return agg ? agg + ` and ${nextGoal}` : `${nextGoal}`;\n  }, \"\");\n\n  return (\n    <div className=\"PhaseCard-container\">\n      <span className=\"Phasekeeper-logo no-animate\">{phaseIndex + 1}</span>\n      <div className=\"PhaseCard-players\">\n        {players.map((p) => (\n          <span\n            key={`PhaseCard-player-${p.playerId}`}\n            className=\"PhaseCard-player\"\n          >\n            {p.name || `Player ${p.playerId}`} ({p.lastCommittedScore})\n          </span>\n        ))}\n      </div>\n      <div className=\"PhaseCard-goal\">{goalText}</div>\n    </div>\n  );\n};\n\nexport const RoundInProgress: React.FC = () => {\n  const [{ players, phasesView }, actions] = useContext(EngineContext);\n\n  const playersByPhase = players.reduce<Record<number, PlayerState[]>>(\n    (agg, p) => {\n      const targetPhase = p.completedPhase;\n      const nextPlayers = [...(agg[targetPhase] || []), p];\n\n      return {\n        ...agg,\n        [targetPhase]: nextPlayers,\n      };\n    },\n    {}\n  );\n\n  const divs = standardPhases.map((phaseDefinition, phaseIndex) => {\n    return (\n      <PhaseCard\n        key={`phaseCard-${phaseIndex}`}\n        phase={phaseDefinition}\n        phaseIndex={phaseIndex}\n        phaseView={phasesView}\n        players={playersByPhase[phaseIndex]}\n      ></PhaseCard>\n    );\n  });\n\n  return (\n    <div>\n      {divs}\n      <button\n        style={{ marginTop: 10 }}\n        className=\"action-button\"\n        onClick={(e) => {\n          actions?.endRound();\n        }}\n      >\n        Next Phase\n      </button>\n    </div>\n  );\n};\n","import React, {\n  Dispatch,\n  SetStateAction,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\n\nimport { PlayerState } from \"../state\";\nimport { EngineContext } from \"../state/EngineContext\";\n\ninterface ScoreCardProps {\n  player: PlayerState;\n}\n\ninterface ScoreSliderProps {\n  label: string;\n  rangeValue: number;\n  setRangeValueCb: Dispatch<SetStateAction<number>>;\n}\n\nconst ScoreSlider: React.FC<ScoreSliderProps> = ({\n  label,\n  rangeValue,\n  setRangeValueCb,\n}) => {\n  return (\n    <div className=\"ScoreCard-slider\">\n      <span>{label}</span>\n      <div>\n        <input\n          className=\"ScoreCard-range\"\n          type=\"range\"\n          min=\"0\"\n          max=\"10\"\n          step=\"1\"\n          onChange={(e) => {\n            setRangeValueCb(+e.target.value);\n          }}\n          value={rangeValue}\n        />\n        <span>{rangeValue}</span>\n      </div>\n    </div>\n  );\n};\n\nconst ScoreCard: React.FC<ScoreCardProps> = ({ player }) => {\n  const [, actions] = useContext(EngineContext);\n\n  const [fives, setFives] = useState(0);\n  const [tens, setTens] = useState(0);\n  const [skips, setSkips] = useState(0);\n  const [wilds, setWilds] = useState(0);\n  const [completedPhase, setCompletedPhase] = useState(false);\n\n  useEffect(() => {\n    const trueAdjustment = fives * 5 + tens * 10 + skips * 25 + wilds * 50;\n    actions?.adjustStagedScoring(\n      player.playerId,\n      trueAdjustment - player.stagedScoreAdjustment\n    );\n    // Disabling since we're using this only to recalculate.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [fives, tens, skips, wilds]);\n\n  return (\n    <div className=\"ScoreCard-container\">\n      <div\n        key={`ScoreCard-player-${player.playerId}`}\n        className=\"ScoreCard-player\"\n      >\n        <span>{player.name || `Player ${player.playerId}`}</span>\n        <div>\n          <label htmlFor=\"phase-complete\">Completed Phase?</label>\n          <input\n            id=\"phase-complete\"\n            type=\"checkbox\"\n            checked={completedPhase}\n            onChange={(e) => {\n              const { checked } = e.target;\n              actions?.adjustPhase(player.playerId, checked ? 1 : -1);\n              setCompletedPhase(checked);\n            }}\n          ></input>\n        </div>\n      </div>\n\n      <ScoreSlider\n        label=\"Cards 1-9\"\n        rangeValue={fives}\n        setRangeValueCb={(x) => {\n          setFives(x);\n        }}\n      />\n\n      <ScoreSlider\n        label=\"Cards 10-12\"\n        rangeValue={tens}\n        setRangeValueCb={(x) => {\n          setTens(x);\n        }}\n      />\n\n      <ScoreSlider\n        label=\"Skips\"\n        rangeValue={skips}\n        setRangeValueCb={(x) => {\n          setSkips(x);\n        }}\n      />\n\n      <ScoreSlider\n        label=\"Wilds\"\n        rangeValue={wilds}\n        setRangeValueCb={(x) => {\n          setWilds(x);\n        }}\n      />\n\n      <span>Round score: {player.stagedScoreAdjustment}</span>\n    </div>\n  );\n};\nexport const Scoring: React.FC = () => {\n  const [{ players }, actions] = useContext(EngineContext);\n\n  return (\n    <div className=\"ScoreCards-container\">\n      {players.map((p) => (\n        <ScoreCard key={`ScoreCard-${p.playerId}`} player={p} />\n      ))}\n\n      <button\n        style={{ marginTop: 10 }}\n        onClick={(e) => actions?.commitScores()}\n      >\n        Continue\n      </button>\n    </div>\n  );\n};\n","import React, { useContext } from \"react\";\r\n\r\nimport { EngineContext } from \"../state/EngineContext\";\r\nimport { EndScreen } from \"./EndScreen\";\r\nimport { GameSetup } from \"./GameSetup\";\r\nimport { RoundInProgress } from \"./RoundInProgress\";\r\nimport { Scoring } from \"./Scoring\";\r\n\r\nexport const Game: React.FC = () => {\r\n  const [state] = useContext(EngineContext);\r\n\r\n  const scene = (function () {\r\n    switch (state.gameState) {\r\n      case \"init\":\r\n        return <GameSetup />;\r\n      case \"active\":\r\n        return state.isRoundInProgress ? <RoundInProgress /> : <Scoring />;\r\n      case \"complete\":\r\n        return <EndScreen />;\r\n    }\r\n  })();\r\n\r\n  return <div className=\"Game-view\">{scene}</div>;\r\n};\r\n","import \"./App.css\";\r\n\r\nimport React from \"react\";\r\n\r\nimport { Game } from \"./components/Game\";\r\nimport { EngineProvider } from \"./state/EngineContext\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\",\r\n          }}\r\n        >\r\n          <div className=\"Phasekeeper-logo\">10</div>\r\n          <h4>Phasekeeper</h4>\r\n        </div>\r\n        <div>\r\n          See it on{\" \"}\r\n          <a\r\n            href=\"https://github.com/druttka/phasekeeper\"\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >\r\n            GitHub\r\n          </a>\r\n          !\r\n        </div>\r\n      </header>\r\n      <EngineProvider>\r\n        <Game />\r\n      </EngineProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}